name: Create liabilities

on:
  schedule:
    - cron: "*/5 * * * *"

jobs:
  update_and_publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install dependencies
        run: npm install

      - name: Update and publish
        id: update_and_publish
        run: |
          # Uninstall existing dependencies if any
          if npm ls --depth 0 --json | jq -e '.dependencies | length > 0' >/dev/null 2>&1; then
            npm ls --depth 0 --json | jq -r '.dependencies | keys[]' | xargs npm uninstall
          fi

          # Get the current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Extract the numeric components of the version using regular expressions
          major=$(echo "$CURRENT_VERSION" | sed -E 's/^([0-9]+)\..*/\1/')
          minor=$(echo "$CURRENT_VERSION" | sed -E 's/^[0-9]+\.([0-9]+)\..*/\1/')
          patch=$(echo "$CURRENT_VERSION" | sed -E 's/^[0-9]+\.[0-9]+\.([0-9]+).*/\1/')

          # Increment the version components based on the rules
          if [ "$patch" -lt 9 ]; then
            # Increment the patch version
            NEW_VERSION="$major.$minor.$((patch + 1))"
          elif [ "$minor" -lt 9 ]; then
            # Increment the minor version and reset the patch version to 0
            NEW_VERSION="$major.$((minor + 1)).0"
          else
            # Increment the major version and reset the minor and patch versions to 0
            NEW_VERSION="$((major + 1)).0.0"
          fi

          # Determine the current vulnerability level
          VULNERABILITY_LEVEL=$(echo $CURRENT_VERSION | grep -oE "[^-]+$")

          # Install the appropriate dependencies based on the vulnerability level
          if [[ $VULNERABILITY_LEVEL == "fixed" ]]; then
            npm install timespan@2.3.0 --save-exact
            NEW_VERSION="${NEW_VERSION}-low-vulnerability"

          elif [[ $VULNERABILITY_LEVEL == "low-vulnerability" ]]; then
            npm install swagger-ui-dist@4.1.2 --save-exact
            NEW_VERSION="${NEW_VERSION}-moderate-vulnerability"

          elif [[ $VULNERABILITY_LEVEL == "moderate-vulnerability" ]]; then
            npm install lodash@4.17.20 --save-exact
            NEW_VERSION="${NEW_VERSION}-high-vulnerability"

          elif [[ $VULNERABILITY_LEVEL == "high-vulnerability" ]]; then
            npm install lodash@4.17.4 --save-exact
            NEW_VERSION="${NEW_VERSION}-critical-vulnerability"

          elif [[ $VULNERABILITY_LEVEL == "critical-vulnerability" ]]; then
            NEW_VERSION="${NEW_VERSION}-deprecated"

          else
            NEW_VERSION="${NEW_VERSION}-fixed"
          fi

          # Update the version in package.json
          npm version $NEW_VERSION --allow-same-version --no-git-tag-version

          # Authenticate with npm
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

          # Push the updated package.json to the repository
          - name: Push updated package.json
            run: |
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add package.json
              git commit -m "Release $VULNERABILITY_LEVEL version"
              git push

          # Publish the new version
          npm publish

          # Deprecate the version if necessary
          if [[ $NEW_VERSION == *"-deprecated" ]]; then
            npm deprecate . "This version is deprecated"
          fi

        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
